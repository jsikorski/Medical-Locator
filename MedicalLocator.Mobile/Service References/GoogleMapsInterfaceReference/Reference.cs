//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace MedicalLocator.Mobile.GoogleMapsInterfaceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GooglePlacesApiRequest", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GooglePlacesAp" +
        "i")]
    public partial class GooglePlacesApiRequest : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool IsGpsUsedField;
        
        private MedicalLocator.Mobile.GoogleMapsInterfaceReference.Location LocationField;
        
        private System.Collections.ObjectModel.ObservableCollection<MedicalLocator.Mobile.GoogleMapsInterfaceReference.MedicalTypeGoogleService> MedicalTypesField;
        
        private int RadiusField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsGpsUsed {
            get {
                return this.IsGpsUsedField;
            }
            set {
                if ((this.IsGpsUsedField.Equals(value) != true)) {
                    this.IsGpsUsedField = value;
                    this.RaisePropertyChanged("IsGpsUsed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public MedicalLocator.Mobile.GoogleMapsInterfaceReference.Location Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public System.Collections.ObjectModel.ObservableCollection<MedicalLocator.Mobile.GoogleMapsInterfaceReference.MedicalTypeGoogleService> MedicalTypes {
            get {
                return this.MedicalTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.MedicalTypesField, value) != true)) {
                    this.MedicalTypesField = value;
                    this.RaisePropertyChanged("MedicalTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public int Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GooglePlacesAp" +
        "i")]
    public partial class Location : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double LatField;
        
        private double LngField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double Lng {
            get {
                return this.LngField;
            }
            set {
                if ((this.LngField.Equals(value) != true)) {
                    this.LngField = value;
                    this.RaisePropertyChanged("Lng");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MedicalTypeGoogleService", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Model")]
    public enum MedicalTypeGoogleService : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Doctor = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dentist = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Health = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hospital = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pharmacy = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Physiotherapist = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GooglePlacesWcfResponse", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GooglePlacesAp" +
        "i")]
    public partial class GooglePlacesWcfResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResult> ResultsField;
        
        private MedicalLocator.Mobile.GoogleMapsInterfaceReference.Status StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResult> Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MedicalLocator.Mobile.GoogleMapsInterfaceReference.Status Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GooglePlacesWcfResult", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GooglePlacesAp" +
        "i")]
    public partial class GooglePlacesWcfResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MedicalLocator.Mobile.GoogleMapsInterfaceReference.Location LocationField;
        
        private string NameField;
        
        private MedicalLocator.Mobile.GoogleMapsInterfaceReference.MedicalTypeGoogleService TypeField;
        
        private string VicinityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MedicalLocator.Mobile.GoogleMapsInterfaceReference.Location Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MedicalLocator.Mobile.GoogleMapsInterfaceReference.MedicalTypeGoogleService Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Vicinity {
            get {
                return this.VicinityField;
            }
            set {
                if ((object.ReferenceEquals(this.VicinityField, value) != true)) {
                    this.VicinityField = value;
                    this.RaisePropertyChanged("Vicinity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GooglePlacesAp" +
        "i")]
    public enum Status : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Zero_Results = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Request_Denied = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultBase", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.InvalidResponseFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.RequestDeniedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.IncorectCharsInAddressFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.ConnectionFault))]
    public partial class FaultBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidResponseFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
    public partial class InvalidResponseFault : MedicalLocator.Mobile.GoogleMapsInterfaceReference.FaultBase {
        
        private string ResponseTextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResponseText {
            get {
                return this.ResponseTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseTextField, value) != true)) {
                    this.ResponseTextField = value;
                    this.RaisePropertyChanged("ResponseText");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestDeniedFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
    public partial class RequestDeniedFault : MedicalLocator.Mobile.GoogleMapsInterfaceReference.FaultBase {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IncorectCharsInAddressFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
    public partial class IncorectCharsInAddressFault : MedicalLocator.Mobile.GoogleMapsInterfaceReference.FaultBase {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
    public partial class ConnectionFault : MedicalLocator.Mobile.GoogleMapsInterfaceReference.FaultBase {
        
        private string OperationField;
        
        private string RequestedAddressField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationField, value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestedAddress {
            get {
                return this.RequestedAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestedAddressField, value) != true)) {
                    this.RequestedAddressField = value;
                    this.RaisePropertyChanged("RequestedAddress");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GoogleGeocodingApiRequest", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GoogleGeocodin" +
        "gApi")]
    public partial class GoogleGeocodingApiRequest : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AddressField;
        
        private bool IsGpsUsedField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public bool IsGpsUsed {
            get {
                return this.IsGpsUsedField;
            }
            set {
                if ((this.IsGpsUsedField.Equals(value) != true)) {
                    this.IsGpsUsedField = value;
                    this.RaisePropertyChanged("IsGpsUsed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GoogleGeocodingWcfResponse", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GoogleGeocodin" +
        "gApi")]
    public partial class GoogleGeocodingWcfResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResult> ResultsField;
        
        private MedicalLocator.Mobile.GoogleMapsInterfaceReference.Status1 StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResult> Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MedicalLocator.Mobile.GoogleMapsInterfaceReference.Status1 Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GoogleGeocodingWcfResult", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GoogleGeocodin" +
        "gApi")]
    public partial class GoogleGeocodingWcfResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MedicalLocator.Mobile.GoogleMapsInterfaceReference.Location1 LocationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MedicalLocator.Mobile.GoogleMapsInterfaceReference.Location1 Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GoogleGeocodin" +
        "gApi")]
    public enum Status1 : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Zero_Results = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Request_Denied = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.GoogleGeocodin" +
        "gApi")]
    public partial class Location1 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double LatField;
        
        private double LngField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public double Lng {
            get {
                return this.LngField;
            }
            set {
                if ((this.LngField.Equals(value) != true)) {
                    this.LngField = value;
                    this.RaisePropertyChanged("Lng");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GoogleMapsInterfaceReference.IGoogleMapsInterfaceService")]
    public interface IGoogleMapsInterfaceService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGoogleMapsInterfaceService/SendGooglePlacesApiRequest", ReplyAction="http://tempuri.org/IGoogleMapsInterfaceService/SendGooglePlacesApiRequestResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.ConnectionFault), Action="http://tempuri.org/IGoogleMapsInterfaceService/SendGooglePlacesApiRequestConnecti" +
            "onFaultFault", Name="ConnectionFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.InvalidResponseFault), Action="http://tempuri.org/IGoogleMapsInterfaceService/SendGooglePlacesApiRequestInvalidR" +
            "esponseFaultFault", Name="InvalidResponseFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.RequestDeniedFault), Action="http://tempuri.org/IGoogleMapsInterfaceService/SendGooglePlacesApiRequestRequestD" +
            "eniedFaultFault", Name="RequestDeniedFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
        System.IAsyncResult BeginSendGooglePlacesApiRequest(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesApiRequest request, System.AsyncCallback callback, object asyncState);
        
        MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResponse EndSendGooglePlacesApiRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGoogleMapsInterfaceService/SendGoogleGeocodingApiRequest", ReplyAction="http://tempuri.org/IGoogleMapsInterfaceService/SendGoogleGeocodingApiRequestRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.ConnectionFault), Action="http://tempuri.org/IGoogleMapsInterfaceService/SendGoogleGeocodingApiRequestConne" +
            "ctionFaultFault", Name="ConnectionFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.IncorectCharsInAddressFault), Action="http://tempuri.org/IGoogleMapsInterfaceService/SendGoogleGeocodingApiRequestIncor" +
            "ectCharsInAddressFaultFault", Name="IncorectCharsInAddressFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.InvalidResponseFault), Action="http://tempuri.org/IGoogleMapsInterfaceService/SendGoogleGeocodingApiRequestInval" +
            "idResponseFaultFault", Name="InvalidResponseFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(MedicalLocator.Mobile.GoogleMapsInterfaceReference.RequestDeniedFault), Action="http://tempuri.org/IGoogleMapsInterfaceService/SendGoogleGeocodingApiRequestReque" +
            "stDeniedFaultFault", Name="RequestDeniedFault", Namespace="http://schemas.datacontract.org/2004/07/GoogleMapsInterfaceService.Faults")]
        System.IAsyncResult BeginSendGoogleGeocodingApiRequest(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingApiRequest request, System.AsyncCallback callback, object asyncState);
        
        MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResponse EndSendGoogleGeocodingApiRequest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGoogleMapsInterfaceServiceChannel : MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendGooglePlacesApiRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendGooglePlacesApiRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendGoogleGeocodingApiRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendGoogleGeocodingApiRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GoogleMapsInterfaceServiceClient : System.ServiceModel.ClientBase<MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService>, MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService {
        
        private BeginOperationDelegate onBeginSendGooglePlacesApiRequestDelegate;
        
        private EndOperationDelegate onEndSendGooglePlacesApiRequestDelegate;
        
        private System.Threading.SendOrPostCallback onSendGooglePlacesApiRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendGoogleGeocodingApiRequestDelegate;
        
        private EndOperationDelegate onEndSendGoogleGeocodingApiRequestDelegate;
        
        private System.Threading.SendOrPostCallback onSendGoogleGeocodingApiRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GoogleMapsInterfaceServiceClient() {
        }
        
        public GoogleMapsInterfaceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GoogleMapsInterfaceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GoogleMapsInterfaceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GoogleMapsInterfaceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<SendGooglePlacesApiRequestCompletedEventArgs> SendGooglePlacesApiRequestCompleted;
        
        public event System.EventHandler<SendGoogleGeocodingApiRequestCompletedEventArgs> SendGoogleGeocodingApiRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService.BeginSendGooglePlacesApiRequest(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesApiRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendGooglePlacesApiRequest(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResponse MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService.EndSendGooglePlacesApiRequest(System.IAsyncResult result) {
            return base.Channel.EndSendGooglePlacesApiRequest(result);
        }
        
        private System.IAsyncResult OnBeginSendGooglePlacesApiRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesApiRequest request = ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesApiRequest)(inValues[0]));
            return ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService)(this)).BeginSendGooglePlacesApiRequest(request, callback, asyncState);
        }
        
        private object[] OnEndSendGooglePlacesApiRequest(System.IAsyncResult result) {
            MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResponse retVal = ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService)(this)).EndSendGooglePlacesApiRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendGooglePlacesApiRequestCompleted(object state) {
            if ((this.SendGooglePlacesApiRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendGooglePlacesApiRequestCompleted(this, new SendGooglePlacesApiRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendGooglePlacesApiRequestAsync(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesApiRequest request) {
            this.SendGooglePlacesApiRequestAsync(request, null);
        }
        
        public void SendGooglePlacesApiRequestAsync(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesApiRequest request, object userState) {
            if ((this.onBeginSendGooglePlacesApiRequestDelegate == null)) {
                this.onBeginSendGooglePlacesApiRequestDelegate = new BeginOperationDelegate(this.OnBeginSendGooglePlacesApiRequest);
            }
            if ((this.onEndSendGooglePlacesApiRequestDelegate == null)) {
                this.onEndSendGooglePlacesApiRequestDelegate = new EndOperationDelegate(this.OnEndSendGooglePlacesApiRequest);
            }
            if ((this.onSendGooglePlacesApiRequestCompletedDelegate == null)) {
                this.onSendGooglePlacesApiRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendGooglePlacesApiRequestCompleted);
            }
            base.InvokeAsync(this.onBeginSendGooglePlacesApiRequestDelegate, new object[] {
                        request}, this.onEndSendGooglePlacesApiRequestDelegate, this.onSendGooglePlacesApiRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService.BeginSendGoogleGeocodingApiRequest(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingApiRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendGoogleGeocodingApiRequest(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResponse MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService.EndSendGoogleGeocodingApiRequest(System.IAsyncResult result) {
            return base.Channel.EndSendGoogleGeocodingApiRequest(result);
        }
        
        private System.IAsyncResult OnBeginSendGoogleGeocodingApiRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingApiRequest request = ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingApiRequest)(inValues[0]));
            return ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService)(this)).BeginSendGoogleGeocodingApiRequest(request, callback, asyncState);
        }
        
        private object[] OnEndSendGoogleGeocodingApiRequest(System.IAsyncResult result) {
            MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResponse retVal = ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService)(this)).EndSendGoogleGeocodingApiRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendGoogleGeocodingApiRequestCompleted(object state) {
            if ((this.SendGoogleGeocodingApiRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendGoogleGeocodingApiRequestCompleted(this, new SendGoogleGeocodingApiRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendGoogleGeocodingApiRequestAsync(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingApiRequest request) {
            this.SendGoogleGeocodingApiRequestAsync(request, null);
        }
        
        public void SendGoogleGeocodingApiRequestAsync(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingApiRequest request, object userState) {
            if ((this.onBeginSendGoogleGeocodingApiRequestDelegate == null)) {
                this.onBeginSendGoogleGeocodingApiRequestDelegate = new BeginOperationDelegate(this.OnBeginSendGoogleGeocodingApiRequest);
            }
            if ((this.onEndSendGoogleGeocodingApiRequestDelegate == null)) {
                this.onEndSendGoogleGeocodingApiRequestDelegate = new EndOperationDelegate(this.OnEndSendGoogleGeocodingApiRequest);
            }
            if ((this.onSendGoogleGeocodingApiRequestCompletedDelegate == null)) {
                this.onSendGoogleGeocodingApiRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendGoogleGeocodingApiRequestCompleted);
            }
            base.InvokeAsync(this.onBeginSendGoogleGeocodingApiRequestDelegate, new object[] {
                        request}, this.onEndSendGoogleGeocodingApiRequestDelegate, this.onSendGoogleGeocodingApiRequestCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService CreateChannel() {
            return new GoogleMapsInterfaceServiceClientChannel(this);
        }
        
        private class GoogleMapsInterfaceServiceClientChannel : ChannelBase<MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService>, MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService {
            
            public GoogleMapsInterfaceServiceClientChannel(System.ServiceModel.ClientBase<MedicalLocator.Mobile.GoogleMapsInterfaceReference.IGoogleMapsInterfaceService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSendGooglePlacesApiRequest(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesApiRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("SendGooglePlacesApiRequest", _args, callback, asyncState);
                return _result;
            }
            
            public MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResponse EndSendGooglePlacesApiRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResponse _result = ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.GooglePlacesWcfResponse)(base.EndInvoke("SendGooglePlacesApiRequest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendGoogleGeocodingApiRequest(MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingApiRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("SendGoogleGeocodingApiRequest", _args, callback, asyncState);
                return _result;
            }
            
            public MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResponse EndSendGoogleGeocodingApiRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResponse _result = ((MedicalLocator.Mobile.GoogleMapsInterfaceReference.GoogleGeocodingWcfResponse)(base.EndInvoke("SendGoogleGeocodingApiRequest", _args, result)));
                return _result;
            }
        }
    }
}
